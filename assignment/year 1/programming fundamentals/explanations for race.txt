
STANDINGS CONTROLLER

package com.Controllers;

import com.Models.Driver;
import com.Utilities.DriversManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;

public class StandingsController {
    private ObservableList<Driver> drivers = FXCollections.observableArrayList();
    //creates an ObservableList of Driver objects to hold the drivers' standings.
    @FXML
    public Button searchBtn;
    @FXML
    public TextField searchField;
    @FXML
    private TableView<Driver> driversTable;

    public void initialize() {
        driversTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        //allows the table to automatically adjust its columns' width to fit the table's width.
        driversTable.setItems(DriversManager.retrieveAllStandings());
        //sets the table's items to the list of drivers' standings retrieved from the DriversManager.
    }

    public void onSearch(ActionEvent actionEvent) {
        //retrieves the text entered in search field
        String searchText = searchField.getText().toLowerCase();// converts it to lowercase
        if (searchText.isEmpty()) driversTable.setItems(DriversManager.retrieveAllStandings());
        //passes it to the DriversManager to retrieve a filtered list of drivers' standings
        else driversTable.setItems(DriversManager.searchStandings(searchText));
        //retrieve the full list of drivers' standings.
    }

    public void onRefresh(ActionEvent actionEvent) {
        searchField.setText("");//clears the search field
        driversTable.setItems(DriversManager.retrieveAllStandings());
        //refreshes the driversTable with the full list of drivers' standings retrieved
        // from the DriversManager.
    }
}




Objects: The code creates instances of several objects, such as ObservableList, Button, TextField, TableView, and DriversManager, and uses them to perform 
various operations. For example, the drivers object of type ObservableList is used to store a list of Driver objects, and the driversTable object of type 
TableView is used to display the list in a tabular format.

Encapsulation: The code encapsulates the logic for retrieving and filtering the list of drivers' standings in the DriversManager class, which is separate 
from the StandingsController class. This improves code maintainability and makes it easier to modify the implementation of the data access layer without 
affecting the controller logic.

Polymorphism: The code uses polymorphism to create an instance of the ObservableList interface that can hold a list of Driver objects. This allows the 
code to use different implementations of the ObservableList interface interchangeably without changing the controller logic.

Abstraction: The code abstracts away the implementation details of the GUI view by using the JavaFX framework to create and manage the view components. 
This allows the code to focus on the controller logic without worrying about the low-level details of GUI programming.
------------------------------------------------------------------------------------------------------------------------------------------------------------

package com.Controllers;

import com.Models.Race;
import com.Models.Result;
import com.Utilities.Constants;
import com.Utilities.Resources;
import com.Utilities.ResultsManager;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableView;
import javafx.stage.Stage;

import java.io.IOException;
import java.text.SimpleDateFormat;

public class RaceController {
    public Button backButton; //This is the button back to go to the race history table
    public TableView<Result> resultsTable;
    public Label title;

    public void setRace(Race selectedRace) { //race object as parameter
        SimpleDateFormat sdf = new SimpleDateFormat(" (E, dd MMM yyyy HH:mm:ss z)");
        // use it to format the date of the selectedRace object
        String formattedDate = sdf.format(selectedRace.getDate()); //formatted date stored as string
        String screenTitle = selectedRace.getName() + " - " + selectedRace.getLocation() + formattedDate;
        //name, location, and formatted date of the selectedRace object
        title.setText(screenTitle);
        resultsTable.setItems(ResultsManager.retrieveAllResults(selectedRace));
    }

    public void initialize() {

        resultsTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        //columns will automatically resize to fit the available space.
    }

    public void onBack(ActionEvent actionEvent) {
        Stage stage = (Stage) backButton.getScene().getWindow(); //gets the Stage object associated
        // with the backButton Button.
        FXMLLoader loader = Resources.getScreen("home.fxml"); //load the user interface defined in the home.fxml file.
        Scene scene = null;
        try {
            scene = new Scene(loader.load()); // creates a new Scene object from the FXML file that was loaded previously
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        HomeController homeController = loader.getController();
        homeController.tabPane.getSelectionModel().select(3);
        //select the fourth tab in the home page which is to display the races
        stage.setScene(scene);
        stage.show();
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

Objects - This code uses several objects which represent the actual screens displayed to the user.Objects such as race,result,resources

Encapsulation: The class uses encapsulation to hide the implementation details of its properties and methods from other parts of the program. 
For example, the setRace method takes a Race object as a parameter and uses it to set the title and table data of the user interface screen. 
The details of how this is done are hidden from other parts of the program.

Polymorphism: The initialize method uses polymorphism to set the column resize policy of the resultsTable object to TableView.CONSTRAINED_RESIZE_POLICY.
This works because resultsTable is of type TableView<Result>, and TableView defines a method called setColumnResizePolicy that takes an argument of type 
TableView.ResizePolicy.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

RACEHISTORY CONTROLLER

package com.Controllers;

import com.Models.Race;
import com.Utilities.Constants;
import com.Utilities.RaceManager;
import com.Utilities.Resources;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

import java.io.IOException;

public class RaceHistoryController {
    public TableView<Race> racesTable;  //display the table
    public TextField searchField;
    public Button searchBtn; //search button to search for specific races
    private final ObservableList<Race> races = FXCollections.observableArrayList();

    public void initialize() {
        racesTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY); //columns will be resized to fill the available space.
        racesTable.setItems(RaceManager.retrieveAllRaces()); //race objects received from a tables class

        racesTable.setOnMouseClicked(event -> { //it is an event listener to click the button so u can retrieve more details of the race
            if (event.getClickCount() == 2) { // so u can retrieve more details of the race
                Race race = racesTable.getSelectionModel().getSelectedItem();
                goToRaceViewScreen(null, event, race);
            }
        });

        TableColumn<Race, Void> seeMoreColumn = new TableColumn<>("");
        seeMoreColumn.setCellFactory(param -> new TableCell<Race, Void>() {
            //seeMoreColumn is colum which refers to another
            private final Button seeMoreButton = new Button("See more..."); //this is the button for see more

            {
                seeMoreButton.setOnAction(event -> {
                    Race race = getTableView().getItems().get(getIndex());
                    goToRaceViewScreen(event, null, race);
                });
                seeMoreButton.prefWidthProperty().bind(seeMoreColumn.widthProperty());
                seeMoreButton.setAlignment(Pos.CENTER);
            }

            @Override
            protected void updateItem(Void item, boolean empty) { //update the content of each cell in the additional column
                super.updateItem(item, empty); //ensure cell is updated correctly

                if (empty) {
                    setGraphic(null);  //if the cell is empty it will set to null
                } else {
                    setGraphic(seeMoreButton);
                }
            }
        });
        seeMoreColumn.setStyle("-fx-alignment: CENTER;");
        racesTable.getColumns().addAll(seeMoreColumn);
    }

    public void goToRaceViewScreen(ActionEvent event, MouseEvent mEvent, Race race) {
        //this is the stage for viewing further details of the race
        Stage stage;
        if (event != null) {
            stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        } else {
            stage = (Stage) ((Node) mEvent.getSource()).getScene().getWindow();
        }

        FXMLLoader loader = Resources.getScreen("race.fxml"); //loads the fxml file for the
        //race view screen
        Scene scene = null;
        try {
            scene = new Scene(loader.load());  //creates a new Scene by loading the FXML file for the race view screen.
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        RaceController controller = loader.getController(); //gets the controller for race view screen
        controller.setRace(race); // Race object to be displayed on the screen.
        stage.setScene(scene);  //sets the scene for the stage and shows the stage.
        stage.show();
    }

    public void onSearch(ActionEvent actionEvent) { //this method is called when the user clicks the search
        String searchText = searchField.getText().toLowerCase(); //It gets the text from a search field and converts it to lowercase.
        if (searchText.isEmpty()) racesTable.setItems(RaceManager.retrieveAllRaces());
        //If the search text is empty, it sets the table items to all races using this method
        else racesTable.setItems(RaceManager.searchRaces(searchText)); // sets the table items to a
        // filtered list of races that match the search text
    }

    public void refreshTable() { //method is called to refresh the table data.
        searchField.setText("");  //clears the search field by setting its text to an empty string.
        racesTable.setItems(RaceManager.retrieveAllRaces()); //sets the table items to all races
    }

    public void onRefresh(ActionEvent actionEvent) { //this method is called when user clicks the refresh button

        refreshTable(); //refreshes the table
    }
}



Polymorphism: There is a use of polymorphism in this code, specifically method overriding. The updateItem method in the TableCell subclass is overridden 
to customize how the cells in the additional column are displayed.

Encapsulation: Polymorphism: There is a use of polymorphism in this code, specifically method overriding. The updateItem method in the TableCell subclass 
is overridden to customize how the cells in the additional column are displayed.

There is an example of abstraction in the Race class, which represents a race and has properties like race name, distance, date, etc. It also has 
methods to retrieve and set these properties, and methods to calculate certain values, such as the average pace of the race. The RaceManager class 
abstracts the storage and retrieval of Race objects, so the RaceHistoryController class doesn't need to know how the races are actually stored.

------------------------------------------------------------------------------------------------------------------------------------------------------------


package com.Controllers;

import com.Models.*;
import com.Utilities.*;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.TextAlignment;
import javafx.util.Duration;
import java.util.Date;

public class RandomRaceController {
    public TextField raceNameField; //text field for entering the race name.
    public TextField raceLocationField;  //text field for entering the race location.
    public Button startBtn; //button to start the race
    public TableView<Result> resultsTable; //display the results after the race
    public Label resultsLabel; //table view to represent the results
    public Pane randomRacePane;// pane containing race components
    public ImageView trackImageView; //represents the image view to display the race track.
    public TableView driversTable; //represents the table view to display the list of drivers.
    public Button finishBtn; //button to finish the race
    public Label countLabel; //represents the label to display the countdown.

    private LinkedList<ImageView> carImageViews;//private LinkedList of ImageView instances
    // named carImageViews that represents the list of car image views.
    private LinkedList<ImageView> treeImageViews; //represents the list of tree image views.
    private ImageView finishLine;//represents the image view for the finish line.

    private LinkedList<Driver> selectedDrivers; //represents the list of selected drivers.
    private TableColumn<Driver, Boolean> checkboxColumn; // table column for the driver
    // selection checkbox.


    @FXML
    public void initialize() {
        resultsTable.setVisible(false);
        resultsLabel.setVisible(false);
        resultsTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY); //columns resize to fill the available space.
        trackImageView.setImage(Constants.Images.TRACK_2);
        trackImageView.setPreserveRatio(false);
        trackImageView.setVisible(false);
        finishBtn.setVisible(false);
        selectedDrivers = new LinkedList<Driver>(); // hold instances of Driver.
        countLabel.setTextFill(Color.RED); //set the text fill, visibility, text alignment,
        // and text of countLabel.
        countLabel.setVisible(false);
        countLabel.setTextAlignment(TextAlignment.CENTER);
        countLabel.setText("");

        driversTable.setItems(DriversManager.retrieveAllDrivers());
        //ets the items of driversTable to a list of drivers retrieved using the
        // retrieveAllDrivers() method of the DriversManager class.
        driversTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        checkboxColumn = new TableColumn<>();
        checkboxColumn.setCellFactory(CheckBoxTableCell.forTableColumn(checkboxColumn)); //checkbox column
        checkboxColumn.setText("Select");
        checkboxColumn.setCellValueFactory(new PropertyValueFactory<>("selected"));
        checkboxColumn.setCellFactory(column -> new TableCell<Driver, Boolean>() {
            private final CheckBox checkBox = new CheckBox();
            {
                checkBox.setOnAction(event -> {
                    if (selectedDrivers.size() >= Constants.MAX_DRIVERS_PER_RACE && checkBox.isSelected()) {
                        checkBox.setSelected(false);
                        Messages.warning("Maximum limit reached", "You can select only up to " + Constants.MAX_DRIVERS_PER_RACE + " drivers!");
                        return;
                    }
                    Driver driver = getTableView().getItems().get(getIndex());
                    driver.setSelected(checkBox.isSelected());
                    if (checkBox.isSelected()) selectedDrivers.add(driver);
                    else selectedDrivers.remove(driver);
                });
            }

            @Override
            protected void updateItem(Boolean item, boolean empty) {
                super.updateItem(item, empty);

                if (empty) {
                    setGraphic(null);
                } else {
                    checkBox.setSelected(item);
                    setGraphic(checkBox);
                }
            }
        });
        driversTable.getColumns().add(checkboxColumn);

    }

    public void onStart(ActionEvent actionEvent) {
        String btnText = startBtn.getText();
        if (btnText.equals("Start")) {
            String name = raceNameField.getText();//get the text in the raceNameField and store
            // in name variable
            String location = raceLocationField.getText(); //gets the text of the
            // raceLocationField and store in name variable

            if (name.equals("")) { //checks if name is empty
                Messages.error("Invalid Name", "Please enter a valid name!");
                return;
            }

            if (location.equals("")) { // checks if location is empty
                Messages.error("Invalid Location", "Please enter a valid location!");
                return;
            }

            if (selectedDrivers.size() < 2) {//checks amount of drivers
                Messages.error("Insufficient Drivers", "Please select at least two drivers!");
                return;
            }

            Race newRace = new Race(name, location, new Date(), DriverSerialization.load());
            //create a new Race object using the name, location, the current date, and a
            // list of Driver objects loaded using the DriverSerialization class
            LinkedList<Result> results = newRace.simulateRace(selectedDrivers);
            //method is called on the newRace object, passing in the selectedDrivers linked list.
            LinkedList<Car> cars = newRace.setCars(results);
            //his method returns a linked list of Result objects, which are then used to
            // create a linked list of Car objects using the setCars method on the newRace object.
            displayRace(newRace, cars, results);
            startBtn.setText("Processing...");
            driversTable.setVisible(false); //hides the drivers table
        } else if (btnText.equals("Reset")) {
            startBtn.setText("Start");
            resultsTable.setVisible(false);
            resultsLabel.setVisible(false);
            raceNameField.setText("");
            raceLocationField.setText("");
            trackImageView.setVisible(false);
            driversTable.setVisible(true);
            DriversManager.resetSelectedStatus();
            driversTable.setItems(DriversManager.retrieveAllDrivers());
            driversTable.refresh();
        }
    }

    public void displayRace(Race race, LinkedList<Car> cars, LinkedList<Result> results) {
        finishLine = new ImageView(Constants.Images.FINISH_LINE);
        finishLine.setFitWidth(850);
        finishLine.setFitHeight(40);
        finishLine.setLayoutX(210);
        finishLine.setLayoutY(80);
        finishLine.setVisible(false);
        carImageViews = new LinkedList<ImageView>(); //the car objects
        trackImageView.setVisible(true);
        finishBtn.setOnAction(e -> {  //action button when the button is clicked race ends
            onRaceEnd(race, results);
            race.finish();
        });

        randomRacePane.getChildren().add(finishLine);

        int i = 0;
        double spacing = cars.size() == 5 ? 140 : cars.size() == 2 ? 320 : cars.size() == 3 ? 230 : 180;
        //space between cars depending on number
        double leftSpace = cars.size() == 5 ? 340 : cars.size() == 2 ? 450 : cars.size() == 3 ? 395 : 365;
        //space from the car to the side track depending on number of cars.
        for(Car car : cars) {
            ImageView carImageView = car.getImage();
            carImageView.setLayoutX(leftSpace + spacing * i);
            carImageView.setLayoutY(700);
            randomRacePane.getChildren().add(carImageView);
            carImageViews.add(carImageView);
            i++;
        }

        i = 1;
        for(SideObject sideObject : race.getSideObjects()) { //sets the position of the trees along
            //the side track
            ImageView treeImageView = sideObject.getImage();
            if (i % 2 == 1) treeImageView.setLayoutX(20); //sets x coordinate of image to 20
            else treeImageView.setLayoutX(1150); //or else sets to 1150
            treeImageView.setLayoutY(sideObject.getPosition());
            //Sets the Y coordinate of the image to the position property of the SideObject.
            randomRacePane.getChildren().add(treeImageView);
            //Adds the treeImageView to the randomRacePane container.
            carImageViews.add(treeImageView);//Adds the treeImageView to the carImageViews list.
            i++;
        }

        finishBtn.toFront();

        Runnable onRaceFinish = () -> { //defines what should happen when the race finishes.
            Platform.runLater(() -> {
                onRaceEnd(race, results);
            });
        };
        countLabel.setVisible(true); //makes count label visible
        startRace(race, onRaceFinish, cars); //calls startRace method passing race object
    }

    public void onRaceEnd(Race race, LinkedList<Result> results) {
        RaceManager.addRace(race, results); //dds the current Race object and its Result objects to the RaceManager.
        resultsTable.setVisible(true); //in this the results table will be visible
        resultsLabel.setVisible(true);
        trackImageView.setVisible(false); //And the racetrack will not be visible
        resultsTable.setItems(ResultsManager.transformToObservableList(results));
        //This line sets the items of the resultsTable to an observable list generated
        // by the ResultsManager.
        if (carImageViews != null) for (ImageView carImageView : carImageViews) carImageView.setVisible(false);
        startBtn.setText("Reset");
        finishBtn.setVisible(false);
        if (finishBtn != null) finishLine.setVisible(false); //finish button will not be visible
        selectedDrivers = new LinkedList<Driver>();
    }

    public void startRace(Race race, Runnable onRaceFinish, LinkedList<Car> cars) {
        countLabel.toFront(); //makes the countlabel visible
        Timeline timeline = new Timeline( //to create the animation
                new KeyFrame(Duration.seconds(1), new EventHandler<ActionEvent>() {
                    int count = 0;
                    @Override
                    public void handle(ActionEvent event) {
                        count++;
                        countLabel.setText(Integer.toString(count));
                        //Sets the text of the countLabel to the current value of the counter variable.
                        if (count == 4) countLabel.setText("GO"); //so after 3 the 4th will be GO
                        if (count == 5) {
                            race.startRace(onRaceFinish, finishLine, randomRacePane, cars);
                            //calls the startRace method on race object passing these objects
                            countLabel.setVisible(false);//count label will be not visible
                            countLabel.setText("");
                            finishBtn.setVisible(true); //finish button will be visible
                        }
                    }
                })
        );
        timeline.setCycleCount(5);
        timeline.play();
        //lays the Timeline, which will execute the event handler every second for 5 seconds.
    }
}
// Runnable onRaceFinish, ImageView finishLine, Pane randomRacePane


Encapsulation: Encapsulation is the practice of keeping implementation details hidden from other code. In this code, we can see that the instance variables 
of the class are declared as private, and access to them is through getter and setter methods.

Inheritance: Inheritance is the ability of a class to inherit properties and behavior from its parent class. In this code, we can see that some of the 
classes like the Result and Driver classes extend the Model class.

Polymorphism: Polymorphism allows objects to take on different forms depending on the context in which they are used. In this code, we can see that the
 Result class overrides the toString() method of the Object class to provide a custom string representation of its instance variables.


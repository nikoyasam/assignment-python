mean<-c(n * p)
variance <- n * p * (1 - p)
print(mean)
print(variance)
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4,7))
me<-47
sd<-7
qnorm(0.9, mean = me , sd = sd)
##Question 1a)
gpas <- c(2.0, 2.1, 3.2, 3.1, 3.6, 2.8, 1.9, 1.8, 2.8, 3.0, 1.9, 1.8, 2.0, 2.1, 2.0, 2.2, 2.2, 3.4, 3.5, 3.0, 3.1, 2.0, 2.3, 2.6, 3.1, 3.3, 3.7, 2.9, 2.3, 2.0)
mean(gpas)
summary(gpas)
##Create boxplot
boxplot(gpas, main = "Boxplot Example",horizontal = T,xlab="gpas")
# Generate a histogram and save it as a PNG file
hist(gpas,breaks=5,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue",border="white")
cor(X, Y)
p50<- pnorm(50,mean,sd)
p_below_50<- p50 * 100
print(paste0("The percentage of students below 50",p_below_50,"%")
library(knitr)
library(tidyverse)
##Question 1a)
gpas <- c(2.0, 2.1, 3.2, 3.1, 3.6, 2.8, 1.9, 1.8, 2.8, 3.0, 1.9, 1.8, 2.0, 2.1, 2.0, 2.2, 2.2, 3.4, 3.5, 3.0, 3.1, 2.0, 2.3, 2.6, 3.1, 3.3, 3.7, 2.9, 2.3, 2.0)
mean(gpas)
median(gpas)
summary(gpas)
##Create boxplot
boxplot(gpas, main = "Boxplot Example",horizontal = T,xlab="gpas")
png("boxplot.png")
boxplot(gpas, main = "Boxplot Example", horizontal = T)
dev.off()
# Generate a histogram and save it as a PNG file
hist(gpas,breaks=5,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue",border="white")
png("myhistogram.png")
hist(gpas,breaks=5,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue")
dev.off()
X <- c(1, 2, 3, 4, 5, 6, 7, 8)
Y <- c(10, 14, 11, 24, 29, 22, 24, 18)
plot(X, Y, xlab = "Month (X)", ylab = "Sales (Rs. 1000's)", main = "Scatterplot of X and Y")
cor(X, Y)
cor(X[1:5], Y[1:5])
# Define the possible outcomes of rolling a six-sided die
# Define the probabilities of each outcome
probs <- c(1/3,2/3)
# Define the amount won by A for each outcome
wins <- c(300,-75)
# Calculate the probability mass function of X
pmf <- data.frame(X = wins, P_X = probs)
pmf
expected_win <- sum(pmf$X*pmf$P_X)
expected_win
variance <- sum(probs * (wins - expected_win)^2)
sd_X <- sqrt(variance)
print(sd_X)
n <- 12
p <- 0.03
less_than_4 <- pbinom(3, size = n, prob = p)
print(less_than_4)
mean<-c(n * p)
variance <- n * p * (1 - p)
print(mean)
print(variance)
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4,7))
mean<-47
sd<-7
p90<-qnorm(0.9, mean ,sd)
p90
p65<-qnorm(0.65, mean ,sd)
p65
median<-qnorm(0.5,mean,sd)
median
p50<- pnorm(50,mean,sd)
p_below_50<- p50 * 100
print(paste0("The percentage of students below 50 is ",p50,"%"))
p50<- pnorm(50,mean,sd)
p_below_50<- p50 * 100
p_below_50
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
variance <- sum(probs * (wins - expected_win)^2)
sd_X <- sqrt(variance)
print(sd_X)
png("myhistogram.png")
hist(gpas,breaks=5,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue")
dev.off()
expected_win <- sum(pmf$X*pmf$P_X)
expected_win
# Generate a histogram and save it as a PNG file
hist(gpas,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue",border="white")
library(knitr)
library(tidyverse)
##Question 1a)
gpas <- c(2.0, 2.1, 3.2, 3.1, 3.6, 2.8, 1.9, 1.8, 2.8, 3.0, 1.9, 1.8, 2.0, 2.1, 2.0, 2.2, 2.2, 3.4, 3.5, 3.0, 3.1, 2.0, 2.3, 2.6, 3.1, 3.3, 3.7, 2.9, 2.3, 2.0)
mean(gpas)
median(gpas)
summary(gpas)
##Create boxplot
boxplot(gpas, main = "Boxplot",horizontal = T,xlab="gpas")
# Generate a histogram and save it as a PNG file
hist(gpas,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue",border="white")
png("myhistogram.png")
hist(gpas,breaks=5,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue")
dev.off()
X <- c(1, 2, 3, 4, 5, 6, 7, 8)
Y <- c(10, 14, 11, 24, 29, 22, 24, 18)
plot(X, Y, xlab = "Month (X)", ylab = "Sales (Rs. 1000's)", main = "Scatterplot of X and Y")
cor(X, Y)
cor(X[1:5], Y[1:5])
# Define the possible outcomes of rolling a six-sided die
# Define the probabilities of each outcome
probs <- c(1/3,2/3)
# Define the amount won by A for each outcome
wins <- c(300,-75)
# Calculate the probability mass function of X
pmf <- data.frame(X = wins, P_X = probs)
pmf
# Define the possible outcomes of rolling a six-sided die
# Define the probabilities of each outcome
probs <- c(2/6,4/6)
# Define the amount won by A for each outcome
wins <- c(300,-75)
# Calculate the probability mass function of X
pmf <- data.frame(X = wins, P_X = probs)
pmf
expected_win <- sum(pmf$X*pmf$P_X)
expected_win
variance <- sum(probs * (wins - expected_win)^2)
sd_X <- sqrt(variance)
print(sd_X)
n <- 12
p <- 0.03
less_than_4 <- pbinom(3, size = n, prob = p)
print(less_than_4)
mean<-c(n * p)
variance <- n * p * (1 - p)
print(mean)
print(variance)
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4,7))
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4))
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4))
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4,4))
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4,9))
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(round(greater_than_4,7))
less_than_equal_4<-pbinom(4, size = n, prob = p)
greater_than_4 <- 1 - less_than_equal_4
print(greater_than_4)
mean<-47
sd<-7
p90<-qnorm(0.9, mean ,sd)
p90
p65<-qnorm(0.65, mean ,sd)
p65
median<-qnorm(0.5,mean,sd)
median
p50<- pnorm(50,mean,sd)
p_below_50<- p50 * 100
p_below_50
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) {
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample)
}
bias <- mean(boot) - mean(value)
bias
mean(value)
##Question 1a)
gpas <- c(2.0, 2.1, 3.2, 3.1, 3.6, 2.8, 1.9, 1.8, 2.8, 3.0, 1.9, 1.8, 2.0, 2.1, 2.0, 2.2, 2.2, 3.4, 3.5, 3.0, 3.1, 2.0, 2.3, 2.6, 3.1, 3.3, 3.7, 2.9, 2.3, 2.0)
mean(gpas)
summary(gpas)
##Create boxplot
boxplot(gpas, main = "Boxplot",horizontal = T,xlab="gpas")
cor(X, Y)
cor(X[1:5], Y[1:5])
expected_win <- sum(pmf$X*pmf$P_X)
expected_win
variance <- sum(probs * (wins - expected_win)^2)
sd_X <- sqrt(variance)
print(sd_X)
summary(gpas)
##Create boxplot
boxplot(gpas, main = "Boxplot",horizontal = T,xlab="gpas")
hist(gpas,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue",border="white")
cor(X, Y)
expected_win <- sum(pmf$X*pmf$P_X)
expected_win
expected_win <- sum(X * P_X)#multiplies the X and Y values
expected_win <- sum(wins * probs)#multiplies the X and Y values
expected_win
expected_win <- sum(wins * probs)#multiplies the X and Y values
print(expected_win)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)#subtracting the mean of the original dataset from the mean of the bootstrap means.
bias
mean(value)
value <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
bootstrap_samples <- 2000  #number of bootstrap samples to take
boot <- numeric(bootstrap_samples)
for (i in 1:bootstrap_samples) { #A for loop is then used to iterate through each bootstrap sample
boot_sample <- sample(value, size = length(value), replace = TRUE)
boot[i] <- mean(boot_sample) #The mean of the bootstrap sample is then calculated and stored in the 'boot' vector
}
bias <- mean(boot) - mean(value)#subtracting the mean of the original dataset from the mean of the bootstrap means.
bias
mean(value)
summary(gpas)
##Create boxplot
boxplot(gpas, main = "Boxplot",horizontal = T,xlab="gpas")
hist(gpas,main = "Distribution of GPAs", xlab = "GPA", ylab = "Frequency",col="blue",border="white")
# question 1
## part 1
#first enter all the data
GPA <- c(2.0, 2.1, 3.2, 3.1, 3.6, 2.8, 1.9, 1.8, 2.8, 3.0, 1.9, 1.8, 2.0,
2.1, 2.0, 2.2, 2.2, 3.4, 3.5, 3.0, 3.1, 2.0, 2.3, 2.6, 3.1, 3.3,
3.7, 2.9, 2.3, 2.0)
# Calculating the mean GPA
mean(GPA)
## part 2
median(GPA)
## part 3
# Calculating the 5-number-summary
summary(GPA)
## part 4
# generating box plot
boxplot(GPA, main = "GPA Boxplot", ylab = "GPA")
## part 5
# generating histogram
hist(GPA, main = "GPA Histogram", xlab = "GPA", ylab = "Frequency")
# question 1
## part 1
#first enter all the data
GPA <- c(2.0, 2.1, 3.2, 3.1, 3.6, 2.8, 1.9, 1.8, 2.8, 3.0, 1.9, 1.8, 2.0,
2.1, 2.0, 2.2, 2.2, 3.4, 3.5, 3.0, 3.1, 2.0, 2.3, 2.6, 3.1, 3.3,
3.7, 2.9, 2.3, 2.0)
# Calculating the mean GPA
mean(GPA)
## part 2
median(GPA)
## part 3
# Calculating the 5-number-summary
summary(GPA)
## part 4
# generating box plot
boxplot(GPA, main = "GPA Boxplot", ylab = "GPA")
## part 5
# generating histogram
hist(GPA, main = "GPA Histogram", xlab = "GPA", ylab = "Frequency")
# question 2
## part 1
# Defining the data
month <- c(1, 2, 3, 4, 5, 6, 7, 8)
sales <- c(10, 14, 11, 24, 29, 22, 24, 18)
# generating the scatterplot
plot(month, sales, main = "Sales Over Time", xlab = "Month", ylab = "Sales")
##part 2
# Calculate the correlation coefficient
cor(month, sales)
##part 3
# Defining the data for the first five months again
month <- c(1, 2, 3, 4, 5)
sales <- c(10, 14, 11, 24, 29)
# Calculate the correlation coefficient
cor(month, sales)
##part 4
"according to the answers in part (b) and (c), we can see that there is a strong positive corelation between the month number and sales. this shows that there is a relationship between the month number and the sales, and that as the months increase, so does the sales. Additionally the correlation coefficient for the first five months is even higher than the eight months, and indicates that the relationship between the variables is strongest in the early months. That may occur due to factors affecting the sales in months "
#question 3
# Define the possible outcomes and their probabilities
amount <- c(300,-75)
probs <- c(1/3,2/3)
## part 1
pmf <- data.frame(amount, probs)
pmf
##part 2
expected_win <- sum(pmf$amount*pmf$probs)
expected_win
## part 3
variance <- sum(pmf$probs * (pmf$amount - expected_win)^2)
sd <- sqrt(variance)
sd
# Define the probabilities of each outcome
probs <- c(2/6,4/6)
# Define the amount won by A for each outcome
wins <- c(300,-75)
# Calculate the probability mass function of X
pmf <- data.frame(X = wins, P_X = probs)
print(pmf)
#question 4
##part 1
"this is a binomial distribution as there is a fixed number of times we are doing the experiment where n is the no. of trials and p is the probability,the probabiliy is also constant and there are only 2 possible outcomes therefore all the conditions are satisfied to be a  binomial distribution"
n <- 12
p <- 0.03
##part 2
prob_less_than_4 <- pbinom(3, n, p)
cat("P(X < 4) =",prob_less_than_4 , "\n")
## part 3
#finding the mean and variance
mean_of_distri <- n * p
var_of_distri <- n * p * (1 - p)
# using cat to display it
cat("Mean of X =", mean_of_distri, "\n")
cat("Variance of X =", var_of_distri, "\n")
## part 4.
prob_greater_than_4  <- 1 - pbinom(4, n, p)
cat("P(X > 4) =", prob_greater_than_4, "\n")
# question 5
##part 1
# defining  mean and standard deviation
mu <- 47
sd <- 7
# 90th percentile
qnorm(0.9, mean = mu, sd = sd)
##part 2
# 65th percentile
qnorm(0.65, mean = mu, sd = sd)
##part 3
# Median
qnorm(0.5, mean = mu, sd = sd)
##part 4
# Percentage of students below 50 marks
pnorm(50, mean = mu, sd = sd)*100
#question 6
# Define the dataset
x <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
# Set the number of bootstrap samples
B <- 2000
# Create an empty vector to store the sample means
boot_means <- numeric(B)
# Perform the bootstrap
for (i in 1:B) {
boot_sample <- sample(x, replace  = TRUE)
boot_means[i] <- mean(boot_sample)
}
# Calculating the bias
bias <- mean(boot_means) - mean(x)
mean<-mean(x)
# Printing the bias
cat("Bias of the sampling distribution:", bias, "\n")
cat("mean of the sampling distribution:", mean, "\n")
#question 6
# Define the dataset
x <- c(1, 2, 3, 5, 5, 8, 7, 6, 8, 9)
# Set the number of bootstrap samples
B <- 2000
# Create an empty vector to store the sample means
boot_means <- numeric(B)
# Perform the bootstrap
for (i in 1:B) {
boot_sample <- sample(x, replace  = TRUE)
boot_means[i] <- mean(boot_sample)
}
# Calculating the bias
bias <- mean(boot_means) - mean(x)
mean<-mean(x)
# Printing the bias
cat("Bias of the sampling distribution:", bias, "\n")
cat("mean of the sampling distribution:", mean, "\n")
mean<-c(n * p)
variance <- n * p * (1 - p)
print(mean)
print(variance)
